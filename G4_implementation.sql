DROP TABLE PAYMENT;

DROP TABLE SERVICE_REQUESTS;

DROP TABLE BOOKING;

DROP TABLE GUEST;

DROP TABLE ROOM;

DROP TABLE ROOM_TYPE;

DROP TABLE HOTEL_SERVICE;

DROP TABLE EMPLOYEE;

DROP TABLE DEPARTMENT;

CREATE TABLE EMPLOYEE (
    EMP_ID NUMBER(10) PRIMARY KEY,
    SALARY NUMBER(5),
    EMP_NAME VARCHAR2(30) NOT NULL,
    HIREDATE DATE,
    EMP_PHONE_NUMBER NUMBER(10),
    JOB VARCHAR2(30) NOT NULL,
    DEPT_ID NUMBER(4) NOT NULL /*FOREIGN KEY,*/
);

CREATE TABLE DEPARTMENT (
    DEPT_ID NUMBER(4) PRIMARY KEY,
    DEPT_NAME VARCHAR2(20) NOT NULL
);

CREATE TABLE BOOKING (
    BOOKING_ID NUMBER(4) PRIMARY KEY,
    BOOKING_DATE DATE NOT NULL,
    CHECKING_DATE DATE NOT NULL,
    CHECKOUT_DATE DATE NOT NULL,
    GUEST_ID NUMBER(4) NOT NULL, /*FOREIGN KEY,*/
    ROOM_ID NUMBER(4) NOT NULL, /*FOREIGN KEY,*/
    EMP_ID NUMBER(10) NOT NULL /*FOREIGN KEY,*/
);

CREATE TABLE GUEST (
    GUEST_ID NUMBER(4) PRIMARY KEY,
    GUEST_NAME VARCHAR2(30) NOT NULL,
    NUMBER_OF_OCCUPANTS NUMBER(1) NOT NULL,
    GUEST_PHONE_NUMBER NUMBER(10) NOT NULL,
    IDENTITY_CARD VARCHAR2(11) NOT NULL,
    AGE NUMBER(3) NOT NULL
);

CREATE TABLE ROOM (
    ROOM_ID NUMBER(4) PRIMARY KEY,
    ROOM_NUMBER NUMBER(3) NOT NULL,
    STATUS VARCHAR2(15) NOT NULL,
    ROOM_TYPE_ID NUMBER(4) NOT NULL /*FOREIGN KEY,*/
);

CREATE TABLE PAYMENT (
    PAYMENT_ID NUMBER(4) PRIMARY KEY,
    BOOKING_ID NUMBER(4) NOT NULL,
    PAYMENT_TYPE VARCHAR2(20) NOT NULL
);

CREATE TABLE ROOM_TYPE (
    ROOM_TYPE_ID NUMBER(4) PRIMARY KEY,
    ROOM_TYPE_NAME VARCHAR2(20) NOT NULL,
    ROOM_TYPE_COST NUMBER(4) NOT NULL,
    ROOM_TYPE_CAPACITY NUMBER(2) NOT NULL,
    PET_FRIENDLY VARCHAR2(3),
    SMOKE_FRIENDLY VARCHAR2(3)
);

CREATE TABLE HOTEL_SERVICE(
    SERVICE_ID NUMBER(4) PRIMARY KEY,
    SERVICE_NAME VARCHAR2(30) NOT NULL,
    SERVICE_COST NUMBER(4) NOT NULL,
    DEPT_ID NUMBER(4) NOT NULL /*FOREIGN KEY,*/
);

CREATE TABLE SERVICE_REQUESTS(
    REQUEST_ID NUMBER(4) PRIMARY KEY,
    REQUEST_DATE DATE NOT NULL,
    SERVICE_ID NUMBER(4) NOT NULL,
    BOOKING_ID NUMBER(4) NOT NULL
);

/*VIEW FOR TOTAL COST OF BOOKINGS*/
CREATE OR REPLACE VIEW TOTAL_COST AS
    SELECT
        BOOKING.BOOKING_ID,
        BOOKING.CHECKING_DATE,
        BOOKING.CHECKOUT_DATE,
        SUM(SERVICE_COST)                                                                  AS SERVICE_COSTS,
        (ROOM_TYPE_COST*(BOOKING.CHECKOUT_DATE-BOOKING.CHECKING_DATE))                     AS ROOM_COST,
        SUM(SERVICE_COST) + (ROOM_TYPE_COST*(BOOKING.CHECKOUT_DATE-BOOKING.CHECKING_DATE)) AS TOTAL_COST
    FROM
        BOOKING,
        HOTEL_SERVICE,
        ROOM_TYPE,
        SERVICE_REQUESTS,
        ROOM
    WHERE
        BOOKING.ROOM_ID = ROOM.ROOM_ID
        AND BOOKING.BOOKING_ID = SERVICE_REQUESTS.BOOKING_ID
        AND SERVICE_REQUESTS.SERVICE_ID = HOTEL_SERVICE.SERVICE_ID
        AND ROOM_TYPE.ROOM_TYPE_ID=ROOM.ROOM_TYPE_ID
    GROUP BY
        BOOKING.BOOKING_ID,
        ROOM_TYPE_COST,
        BOOKING.CHECKING_DATE,
        BOOKING.CHECKOUT_DATE;

ALTER SESSION SET NLS_LANGUAGE='ENGLISH';

ALTER SESSION SET NLS_DATE_FORMAT='DD-MON-YYYY';

--UNIQUE KEYS
ALTER TABLE EMPLOYEE ADD CONSTRAINT EMPLOYEE_PN_UK UNIQUE (EMP_PHONE_NUMBER);

ALTER TABLE GUEST ADD CONSTRAINT IDENTITY_CARD_UK UNIQUE (IDENTITY_CARD);

ALTER TABLE GUEST ADD CONSTRAINT GUEST_PHONE_NUMBER_UK UNIQUE (GUEST_PHONE_NUMBER);

--FOREIGN KEYS
ALTER TABLE EMPLOYEE ADD CONSTRAINT DEPT_ID_FK FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID);

ALTER TABLE HOTEL_SERVICE ADD CONSTRAINT DEPT_ID_FK2 FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID);

ALTER TABLE BOOKING ADD CONSTRAINT EMP_ID_FK FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE(EMP_ID);

ALTER TABLE BOOKING ADD CONSTRAINT GUEST_ID_FK FOREIGN KEY (GUEST_ID) REFERENCES GUEST(GUEST_ID);

ALTER TABLE BOOKING ADD CONSTRAINT ROOM_ID_FK FOREIGN KEY (ROOM_ID) REFERENCES ROOM(ROOM_ID);

ALTER TABLE ROOM ADD CONSTRAINT ROOM_TYPE_ID_FKI FOREIGN KEY (ROOM_TYPE_ID) REFERENCES ROOM_TYPE(ROOM_TYPE_ID);

ALTER TABLE PAYMENT ADD CONSTRAINT P_B_ID FOREIGN KEY (BOOKING_ID) REFERENCES BOOKING(BOOKING_ID);

ALTER TABLE SERVICE_REQUESTS ADD CONSTRAINT S_B_ID FOREIGN KEY (BOOKING_ID) REFERENCES BOOKING(BOOKING_ID);

ALTER TABLE SERVICE_REQUESTS ADD CONSTRAINT S_S_ID FOREIGN KEY (SERVICE_ID) REFERENCES HOTEL_SERVICE(SERVICE_ID);

--CHECK CONSTRAINTS
ALTER TABLE ROOM ADD CONSTRAINT ROOM_NUMBER_CK CHECK (ROOM_NUMBER > 0);

ALTER TABLE ROOM ADD CONSTRAINT ROOM_STATUS_CK CHECK (STATUS IN ('AVAILABLE', 'NOT AVAILABLE'));

ALTER TABLE ROOM_TYPE ADD CONSTRAINT ROOM_TYPE_COST_CK CHECK (ROOM_TYPE_COST > 0);

ALTER TABLE ROOM_TYPE ADD CONSTRAINT ROOM_TYPE_CAPACITY_CK CHECK (ROOM_TYPE_CAPACITY > 0
AND ROOM_TYPE_CAPACITY < 5);

ALTER TABLE ROOM_TYPE ADD CONSTRAINT ROOM_TYPE_PET_FRIENDLY_CK CHECK (PET_FRIENDLY IN ('YES', 'NO'));

ALTER TABLE ROOM_TYPE ADD CONSTRAINT ROOM_TYPE_SMOKE_FRIENDLY_CK CHECK (SMOKE_FRIENDLY IN ('YES', 'NO'));

ALTER TABLE EMPLOYEE ADD CONSTRAINT EMPLOYEE_SALARY_CK CHECK (SALARY > 0);

ALTER TABLE EMPLOYEE ADD CONSTRAINT EMPLOYEE_PHONE_NUMBER_CK CHECK (EMP_PHONE_NUMBER > 0);

ALTER TABLE GUEST ADD CONSTRAINT G_N_CHECK CHECK(NUMBER_OF_OCCUPANTS > 0);

ALTER TABLE GUEST ADD CONSTRAINT G_AGE_CHECK CHECK(AGE > 0);

ALTER TABLE ROOM ADD CONSTRAINT R_STATUS_CHECK CHECK (STATUS IN ('AVAILABLE', 'NOT AVAILABLE'));

ALTER TABLE PAYMENT ADD CONSTRAINT PAYMENT_TYPE_CHECK CHECK (PAYMENT_TYPE IN ('CASH', 'CREDIT CARD'));

/*TRIGGER FOR CHANGE ROOM STATUS AFTER BOOKING*/
CREATE OR REPLACE TRIGGER CHANGEROOMSTATUS AFTER
    INSERT ON BOOKING FOR EACH ROW
BEGIN
    UPDATE ROOM
    SET
        STATUS = 'NOT AVAILABLE'
    WHERE
        ROOM_ID = :NEW.ROOM_ID;
END;
/

CREATE OR REPLACE TRIGGER CHECKBOOKINGDATE BEFORE
    INSERT OR UPDATE ON BOOKING FOR EACH ROW
BEGIN
    IF :NEW.CHECKING_DATE < SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'Can not book a date in the past');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER CHECKEMPHIREDATE BEFORE
    INSERT ON EMPLOYEE FOR EACH ROW
BEGIN
    IF :NEW.HIREDATE < SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot add employee with a hire date earlier than the current date');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER CHECKBOOKINGDATES BEFORE
    INSERT ON BOOKING FOR EACH ROW
BEGIN
    IF :NEW.CHECKOUT_DATE < :NEW.CHECKING_DATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot book a room with a checkout date earlier than the check-in date');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER ROOMAVAILABLECHECK BEFORE
    INSERT ON BOOKING FOR EACH ROW
DECLARE
    CHECKING_DATE DATE;
    CHECKOUT_DATE DATE;
BEGIN
    SELECT
        CHECKING_DATE,
        CHECKOUT_DATE INTO CHECKING_DATE,
        CHECKOUT_DATE
    FROM
        BOOKING
    WHERE
        ROOM_ID = :NEW.ROOM_ID;
    IF (CHECKING_DATE BETWEEN :NEW.CHECKING_DATE
    AND :NEW.CHECKOUT_DATE) OR (CHECKOUT_DATE BETWEEN :NEW.CHECKING_DATE
    AND :NEW.CHECKOUT_DATE) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Room is not available for this date!');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER DEPTCHECKBOOKING BEFORE
    INSERT ON BOOKING FOR EACH ROW
DECLARE
    SALES_DEPT_ID    NUMBER;
    EMPLOYEE_DEPT_ID NUMBER;
    ERROR_MESSAGE    VARCHAR2(100);
BEGIN
    SELECT
        DEPT_ID INTO SALES_DEPT_ID
    FROM
        DEPARTMENT
    WHERE
        DEPT_NAME = 'SALES';
    SELECT
        DEPT_ID INTO EMPLOYEE_DEPT_ID
    FROM
        EMPLOYEE
    WHERE
        EMP_ID = :NEW.EMP_ID;
    IF EMPLOYEE_DEPT_ID != SALES_DEPT_ID THEN
        ERROR_MESSAGE := 'Only employees in the Sales department can book rooms.';
        RAISE_APPLICATION_ERROR(-20000, ERROR_MESSAGE);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER SERVICE_REQ_DATE_CHECK BEFORE
    INSERT ON SERVICE_REQUESTS FOR EACH ROW
BEGIN
    IF :NEW.REQUEST_DATE != SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'Service request must be made on the current date');
    END IF;
END;
/